{"version":3,"sources":["logo.svg","visualization/Algo/SelectionSortAlgo.js","visualization/SelectionSort.js","visualization/Algo/BubbleSortAlgo.js","visualization/BubbleSort.js","visualization/Algo/InsertionSortAlgo.js","visualization/InsertionSort.js","visualization/Algo/QuickSortAlgo.js","visualization/QuickSort.js","visualization/Algo/MergeSortAlgo.js","visualization/MergeSort.js","visualization/sortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SelectionSortAlgo","arr","animations","res_arr","slice","console","log","i","length","min_index","j","push","temp","checkSorting","SelectionSort","this","setState","title","state","array_bars","document","getElementsByClassName","barIndex1","barIndex2","order","color1","color2","setTimeout","style","backgroundColor","ANIMATION_SPEED","idx1","h1","idx2","h2","height","innerHTML","disabled","BubbleSortAlgo","pairs","temp2","end","reset","sorted","sort","a","b","BubbleSort","animation","newHeight1","newHeight2","InsertionSortAlgo","prev_index","current_val","InsertionSort","arr_bars","QuickSortAlgo","res_array","QuickSort","low","high","pivot","partion","MergeSortAlgo","res_arr_2","MergeSort","main_arr","start","mid","Math","floor","k","getRandNum","random","SortingVisualizer","bind","resetArr","handleClick","handleChange","res","e","val","target","value","n","Number","is_int","Infinity","String","speed","parseInt","className","onClick","type","onChange","placeholder","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98fa9da2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\n// using mod 2\r\nfunction SelectionSortAlgo(arr){\r\n    var animations = []\r\n    var res_arr = arr.slice()\r\n    console.log(res_arr)\r\n    for(var i=0; i < res_arr.length; i++){\r\n        var min_index = i\r\n        for (var j=i; j < res_arr.length; j++){\r\n            \r\n            // 1: set color to green for comparison\r\n            animations.push([i, j, '1st'])\r\n            // 2: reset color of index j to initial\r\n            animations.push([i, j, '2nd'])\r\n            if (res_arr[j] < res_arr[min_index]){\r\n                // set new min index\r\n                min_index = j\r\n            }\r\n        }\r\n        // 1: Make red to indicate swapping\r\n        animations.push([i, min_index, '3rd'])\r\n        // 2: swap\r\n        // animations.push([i, min_index, '4th'])\r\n        animations.push([i, res_arr[min_index], '4th', min_index, res_arr[i]])\r\n        // 1: change color back to initial and set color in index i to DONE_COLOR\r\n        animations.push([i, min_index, '5th'])\r\n        // [res_arr[i], res_arr[min_index]] = [res_arr[min_index], res_arr[i]]\r\n        var temp = res_arr[i]\r\n        res_arr[i] = res_arr[min_index]\r\n        res_arr[min_index] = temp\r\n    }\r\n    console.log(checkSorting(res_arr))\r\n    console.log(res_arr)\r\n    return animations\r\n}\r\n\r\nfunction checkSorting(arr){ \r\n    for (var i=0; i < arr.length-1; i++){\r\n        if (arr[i] > arr[i+1]){ return false }\r\n    }\r\n    return true\r\n}\r\n\r\nexport default SelectionSortAlgo","import SelectionSortAlgo from './Algo/SelectionSortAlgo.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nexport const SelectionSort = function() {\r\n    this.setState({title: 'Selection Sort'})\r\n    const animations = SelectionSortAlgo(this.state.arr)\r\n    const array_bars = document.getElementsByClassName('bar')\r\n\r\n    for (var i=0; i < animations.length; i++){\r\n        const [barIndex1, barIndex2, order] = animations[i]\r\n        if (order !== '4th'){\r\n            const color1 = (order === '1st') ? SUCCESS_COLOR :\r\n                            (order === '2nd') ? SUCCESS_COLOR: \r\n                            (order === '3rd') ? SWAP_COLOR :\r\n                            (order === '5th') ? DONE_COLOR: 'black'\r\n\r\n            const color2 = (order === '1st') ? SUCCESS_COLOR : \r\n                            (order === '2nd') ? INITIAL_COLOR: \r\n                            (order === '3rd') ? SWAP_COLOR :\r\n                            (order === '5th') ? INITIAL_COLOR: 'black'\r\n\r\n            setTimeout(()=>{\r\n                array_bars[barIndex2].style.backgroundColor = color2\r\n                array_bars[barIndex1].style.backgroundColor = color1\r\n            }, i * this.state.ANIMATION_SPEED)\r\n        }\r\n        else{ //swap \r\n            const [idx1, h1, order, idx2, h2] = animations[i]\r\n            setTimeout(() =>{\r\n                // get the height number for the bars\r\n                // const h1 = array_bars[barIndex1].style.height.slice(0, -2)\r\n                // const h2 = array_bars[barIndex2].style.height.slice(0, -2)\r\n                // assign height \r\n                array_bars[idx1].style.height = `${h1}px`\r\n                array_bars[idx1].innerHTML = h1\r\n                array_bars[idx2].style.height = `${h2}px`\r\n                array_bars[idx2].innerHTML = h2\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        // after sorting\r\n        if (i === animations.length-1){\r\n            // make all columns green\r\n            setTimeout(() => {\r\n                for (var i=0; i < array_bars.length; i++){\r\n                    array_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                }\r\n                this.setState({disabled: false})\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n    }\r\n};","import React from 'react'\r\n\r\nfunction BubbleSortAlgo(arr){\r\n    // push 4 times\r\n    var pairs= []\r\n    const length = arr.length\r\n    var res_arr = arr.slice()\r\n    for (var i=0; i< length-1; i++){\r\n        for(var j=0; j < length-i-1; j++){\r\n            let temp = res_arr[j]\r\n            let temp2 = res_arr[j+1]\r\n            var end = (j === length-i-2 ? true: false)\r\n            var reset = (j === 0) ? false : true\r\n            // 1st: Change iterating blocks to green\r\n            pairs.push([j, j+1, reset])\r\n            if (res_arr[j] > res_arr[j+1]){\r\n                [res_arr[j], res_arr[j+1]] = [res_arr[j+1], res_arr[j]]\r\n                // 2nd: change color to red for swapping\r\n                pairs.push([j, j+1])\r\n                // 3rd: swap bars\r\n                pairs.push([j, temp2, j+1, temp])\r\n                // 4th: change bar colors back to initial color\r\n                pairs.push([j, j+1, end])\r\n            }\r\n            else{\r\n                // 2nd: no change \r\n                pairs.push([-1])\r\n                // 3rd: no change\r\n                pairs.push([-1])\r\n                // 4th: change color if end\r\n                if (end) {\r\n                    pairs.push([j, j+1, end])\r\n                }\r\n                else{ pairs.push([-1])}\r\n            }\r\n        }\r\n    }\r\n    const sorted = arr.slice().sort((a, b) => a - b)\r\n    console.log(res_arr)\r\n    console.log(sorted)\r\n    return pairs\r\n}\r\n\r\nexport default BubbleSortAlgo","import BubbleSortAlgo from './Algo/BubbleSortAlgo.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nexport const BubbleSort = function() {\r\n    this.setState({title: 'Bubble Sort'})\r\n    const array_bars = document.getElementsByClassName('bar')\r\n    const animation = BubbleSortAlgo(this.state.arr)\r\n    for (var i=0; i <animation.length; i++){\r\n        if (animation[i][0] === -1){\r\n            continue;\r\n        }\r\n        else if (i%4===0){\r\n            // const [barIndex1, barIndex2, reset] = animation[i]\r\n            // setTimeout(function(index1, index2){\r\n            //     array_bars[index1].style.backgroundColor = SUCCESS_COLOR\r\n            //     array_bars[index2].style.backgroundColor = SUCCESS_COLOR\r\n            //     if (reset){\r\n            //         array_bars[index1-1].style.backgroundColor = INITIAL_COLOR\r\n            //     }\r\n            // }, i*ANIMATION_SPEED, barIndex1, barIndex2)\r\n            const [barIndex1, barIndex2, reset] = animation[i]\r\n            setTimeout(() =>{\r\n                array_bars[barIndex1].style.backgroundColor = SUCCESS_COLOR\r\n                array_bars[barIndex2].style.backgroundColor = SUCCESS_COLOR\r\n                if (reset){\r\n                    array_bars[barIndex1-1].style.backgroundColor = INITIAL_COLOR\r\n                }\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        else if (i%4 === 1){\r\n            // const [barIndex1, barIndex2] = animation[i]\r\n            // setTimeout(function(index1, index2){\r\n            //     array_bars[index1].style.backgroundColor = SWAP_COLOR\r\n            //     array_bars[index2].style.backgroundColor = SWAP_COLOR\r\n            // }, i*this.state.ANIMATION_SPEED, barIndex1, barIndex2)\r\n            const [barIndex1, barIndex2] = animation[i]\r\n            setTimeout(()=>{\r\n                array_bars[barIndex1].style.backgroundColor = SWAP_COLOR\r\n                array_bars[barIndex2].style.backgroundColor = SWAP_COLOR\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        else if (i%4 === 2){\r\n            // const [barIndex1, newHeight1, barIndex2, newHeight2] = animation[i]\r\n            // setTimeout(function(index1, height1, index2, height2){\r\n            //     array_bars[index1].style.height = `${height1}px`\r\n            //     array_bars[index1].innerHTML = height1\r\n\r\n            //     array_bars[index2].style.height = `${height2}px`\r\n            //     array_bars[index2].innerHTML = height2\r\n                \r\n            // }, i*this.state.ANIMATION_SPEED, barIndex1, newHeight1, barIndex2, newHeight2)\r\n            const [barIndex1, newHeight1, barIndex2, newHeight2] = animation[i]\r\n            setTimeout(()=>{\r\n                array_bars[barIndex1].style.height = `${newHeight1}px`\r\n                array_bars[barIndex1].innerHTML = newHeight1\r\n\r\n                array_bars[barIndex2].style.height = `${newHeight2}px`\r\n                array_bars[barIndex2].innerHTML = newHeight2\r\n                \r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        else if(i%4 ===3){\r\n            // const [barIndex1, barIndex2, end] = animation[i]\r\n            // const color1 = INITIAL_COLOR\r\n            // const color2 = end ? DONE_COLOR : INITIAL_COLOR\r\n            // setTimeout(function(index1, index2){\r\n            //     array_bars[index1].style.backgroundColor = color1\r\n            //     array_bars[index2].style.backgroundColor = color2\r\n            // }, i*this.state.ANIMATION_SPEED, barIndex1, barIndex2)\r\n            const [barIndex1, barIndex2, end] = animation[i]\r\n            const color1 = INITIAL_COLOR\r\n            const color2 = end ? DONE_COLOR : INITIAL_COLOR\r\n            setTimeout(()=>{\r\n                array_bars[barIndex1].style.backgroundColor = color1\r\n                array_bars[barIndex2].style.backgroundColor = color2\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n\r\n        // after sorting\r\n        if (i === animation.length-1){\r\n            // make first column purple\r\n            setTimeout(()=>{\r\n                array_bars[0].style.backgroundColor = DONE_COLOR\r\n            }, i*this.state.ANIMATION_SPEED)\r\n            // make all columns green\r\n            setTimeout(() => {\r\n                for (var i=0; i < array_bars.length; i++){\r\n                    array_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                }\r\n                this.setState({disabled: false})\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n    }\r\n};","function InsertionSortAlgo(arr){\r\n    const animations = []\r\n    const res_arr = arr.slice()\r\n    for (var i =1; i < res_arr.length; i++){\r\n        var prev_index = i-1 \r\n        var current_val = res_arr[i]\r\n        // 1. push iteration color: green\r\n        animations.push(['1st', prev_index, i])\r\n\r\n        while(prev_index >= 0 && res_arr[prev_index] > current_val){\r\n            // 2. checking prev and curr val: red\r\n            animations.push(['2nd', prev_index, prev_index+1])\r\n            // 3. swap\r\n            animations.push(['3rd', prev_index, current_val, prev_index+1, res_arr[prev_index]])\r\n            // 4. set current index to inital, but keep prev SWAP_COLOR\r\n            animations.push(['4th', prev_index, prev_index+1])\r\n\r\n            // swap and check next prev \r\n            res_arr[prev_index+1] = res_arr[prev_index]\r\n            prev_index -= 1\r\n        }\r\n        if (prev_index < 0) {\r\n            // 5. reset first index to initial color; current index is green\r\n            animations.push(['5th', prev_index+1, prev_index+1])\r\n        }\r\n        else{\r\n            // 6. set indexes to inital after backtracking \r\n            animations.push(['6th', prev_index, prev_index+1])\r\n        }\r\n\r\n        // add val to current position \r\n        res_arr[prev_index +1] = current_val\r\n    }\r\n    console.log(res_arr)\r\n    console.log('sorted:',checkSorting(res_arr))\r\n    return animations\r\n}\r\n\r\nfunction checkSorting(arr){ \r\n    for (var i=0; i < arr.length-1; i++){\r\n        if (arr[i] > arr[i+1]){ return false }\r\n    }\r\n    return true\r\n}\r\n\r\nexport default InsertionSortAlgo","import InsertionSortAlgo from './Algo/InsertionSortAlgo.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nexport const InsertionSort = function(){\r\n    this.setState({title: 'Insertion Sort'})\r\n    const animations = InsertionSortAlgo(this.state.arr)\r\n    const arr_bars = document.getElementsByClassName('bar')\r\n\r\n    for (var i = 0; i < animations.length; i++){\r\n        const [order, barIndex1, barIndex2] = animations[i]\r\n        // change bar color\r\n        if (order !== '3rd'){\r\n            const color1 = (order === '1st') ? SUCCESS_COLOR :\r\n                           (order === '2nd') ? SWAP_COLOR :\r\n                           (order === '4th') ? SWAP_COLOR :\r\n                           (order === '5th') ? INITIAL_COLOR : \r\n                           (order === '6th') ? INITIAL_COLOR : 'black'\r\n\r\n            const color2 = (order === '1st') ? SUCCESS_COLOR :\r\n                           (order === '2nd') ? SWAP_COLOR :\r\n                           (order === '4th') ? INITIAL_COLOR :\r\n                           (order === '5th') ? INITIAL_COLOR : \r\n                           (order === '6th') ? INITIAL_COLOR : 'black'\r\n            setTimeout(()=>{\r\n                arr_bars[barIndex1].style.backgroundColor = color1\r\n                arr_bars[barIndex2].style.backgroundColor = color2\r\n            }, i* this.state.ANIMATION_SPEED)\r\n        }\r\n        else{ // swap\r\n            const [order, barIndex1, h1, barIndex2, h2] = animations[i]\r\n            setTimeout(()=>{\r\n                arr_bars[barIndex1].style.height = `${h1}px`\r\n                arr_bars[barIndex1].innerHTML = h1\r\n                arr_bars[barIndex2].style.height = `${h2}px`\r\n                arr_bars[barIndex2].innerHTML = h2\r\n            }, i *this.state.ANIMATION_SPEED)\r\n        }\r\n        // after sorting\r\n        if (i === animations.length-1){\r\n            // make all columns green\r\n            setTimeout(() => {\r\n                for (var i=0; i < arr_bars.length; i++){\r\n                    arr_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                }\r\n                this.setState({disabled: false})\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n    }\r\n}","\r\nfunction QuickSortAlgo(arr){\r\n    const animations = []\r\n    const res_array = arr.slice()\r\n    QuickSort(res_array, 0, res_array.length-1, animations)\r\n    console.log(checkSorting(res_array))\r\n    return animations\r\n}\r\n\r\nfunction QuickSort(arr, low, high, animations){\r\n    if (low < high){\r\n        var pivot = partion(arr, low, high, animations)\r\n        QuickSort(arr, low, pivot-1, animations)\r\n        animations.push(['7th',low, pivot])\r\n        QuickSort(arr, pivot+1, high, animations)\r\n        animations.push(['7th',pivot, high])\r\n    }\r\n}\r\n\r\n// use last elem as pivot\r\nfunction partion(arr, low, high, animations){\r\n    var i = low\r\n    var pivot = arr[high]\r\n\r\n    // 1. push pivot: yellow\r\n    animations.push(['1st', high, high])\r\n\r\n    for (var j=low; j <high; j++){\r\n        // 2: push iteration: green\r\n        animations.push(['2nd', i, j])\r\n        // 2.5: reset j to initial\r\n        animations.push(['2.5nd', i, j])\r\n\r\n        if (arr[j] < pivot){\r\n            // 3. getting ready to swap: red\r\n            animations.push(['3rd', i, j])\r\n            // 4. swap\r\n            animations.push(['4th', i, arr[j], j, arr[i]])\r\n            // 5. reset color to inital \r\n            animations.push(['5th', i, j])\r\n\r\n            var temp = arr[i]\r\n            arr[i] = arr[j]\r\n            arr[j] = temp\r\n            i++;\r\n        }\r\n    }\r\n    // 3. getting ready to swap: red\r\n    animations.push(['3rd', i, high])\r\n    // 4. swap\r\n    animations.push(['4th', i, arr[high], high, arr[i]])\r\n    // 6. set index i to done \r\n    animations.push(['6th', i, high])\r\n\r\n    var temp = arr[i]\r\n    arr[i] = arr[high]\r\n    arr[high] = temp    \r\n\r\n    return i\r\n}\r\n\r\nfunction checkSorting(arr){ \r\n    for (var i=0; i < arr.length-1; i++){\r\n        if (arr[i] > arr[i+1]){ return false }\r\n    }\r\n    return true\r\n}\r\n\r\nexport default QuickSortAlgo","import QuickSortAlgo from './Algo/QuickSortAlgo'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nexport const QuickSort = function(){\r\n    this.setState({title: 'Quick Sort'})\r\n    const animations = QuickSortAlgo(this.state.arr)\r\n    const arr_bars = document.getElementsByClassName('bar')\r\n    \r\n    for (var i =0; i < animations.length; i++){\r\n        const [order, barIndex1, barIndex2] = animations[i]\r\n        if (order !== '4th'){\r\n            const color1 = (order === '1st') ? 'yellow' : \r\n                           (order === '2nd') ? SUCCESS_COLOR :\r\n                           (order === '2.5nd') ? SUCCESS_COLOR :\r\n                           (order === '3rd') ? SWAP_COLOR :\r\n                           (order === '5th') ? INITIAL_COLOR :\r\n                           (order === '6th') ? DONE_COLOR : \r\n                           (order === '7th') ? DONE_COLOR : 'black' \r\n            \r\n            const color2 = (order === '1st') ? 'yellow' : \r\n                           (order === '2nd') ? SUCCESS_COLOR :\r\n                           (order === '2.5nd') ? INITIAL_COLOR :\r\n                           (order === '3rd') ? SWAP_COLOR :\r\n                           (order === '5th') ? INITIAL_COLOR :\r\n                           (order === '6th') ? INITIAL_COLOR : \r\n                           (order === '7th') ? DONE_COLOR : 'black' \r\n            \r\n            setTimeout(()=>{\r\n                console.log(barIndex1,barIndex2,'=========')\r\n                arr_bars[barIndex1].style.backgroundColor = color1\r\n                arr_bars[barIndex2].style.backgroundColor = color2\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        else{ // swap\r\n            const [order, barIndex1, h1, barIndex2, h2] = animations[i]\r\n            setTimeout(()=>{\r\n                arr_bars[barIndex1].style.height = `${h1}px`\r\n                arr_bars[barIndex1].innerHTML = h1\r\n                arr_bars[barIndex2].style.height = `${h2}px`\r\n                arr_bars[barIndex2].innerHTML = h2\r\n            }, i *this.state.ANIMATION_SPEED)\r\n        }\r\n        // after sorting\r\n        if (i === animations.length-1){\r\n            // make all columns green\r\n            setTimeout(() => {\r\n                for (var i=0; i < arr_bars.length; i++){\r\n                    arr_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                }\r\n                this.setState({disabled: false})\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n    }\r\n}","function MergeSortAlgo(arr){\r\n    const animations = []\r\n    const res_arr = arr.slice()\r\n    const res_arr_2 = arr.slice()\r\n    MergeSort(res_arr, 0, arr.length-1, res_arr_2, animations)\r\n    console.log('sorted:',checkSorting(res_arr))\r\n    return animations\r\n}\r\n\r\nfunction MergeSort(main_arr, start, end, arr, animations){\r\n  if (start === end){ \r\n    return\r\n  }\r\n  const mid = Math.floor((start+end)/2)\r\n  MergeSort(arr, start, mid, main_arr, animations)\r\n  MergeSort(arr, mid+1, end, main_arr, animations)\r\n\r\n  let k = start\r\n  let i = start\r\n  let j = mid + 1\r\n  while (i <= mid && j <= end) {\r\n    // 1. get iteration color; green\r\n    animations.push(['1st', i, j])\r\n    // 2. reset; initial\r\n    animations.push(['2nd', i, j])\r\n\r\n    if (arr[i] <= arr[j]) {\r\n      // 3. set \r\n      animations.push(['3rd', k, arr[i]])\r\n      \r\n      main_arr[k] = arr[i];\r\n      k++\r\n      i++\r\n    } else {\r\n      // 3. set \r\n      animations.push(['3rd', k, arr[j]])\r\n\r\n      main_arr[k] = arr[j];\r\n      k++\r\n      j++\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    // 3. set \r\n    animations.push(['3rd', k, arr[i]])\r\n\r\n    main_arr[k] = arr[i];\r\n    k++\r\n    i++\r\n  }\r\n  while (j <= end) {\r\n    // 3. set \r\n    animations.push(['3rd', k, arr[j]])\r\n\r\n    main_arr[k] = arr[j];\r\n    k++\r\n    j++\r\n  }\r\n}\r\n\r\nfunction checkSorting(arr){ \r\n    for (var i=0; i < arr.length-1; i++){\r\n        if (arr[i] > arr[i+1]){ return false }\r\n    }\r\n    return true\r\n}\r\n\r\nexport default MergeSortAlgo","import MergeSortAlgo from './Algo/MergeSortAlgo.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nexport const MergeSort = function(){\r\n    this.setState({title: 'Merge Sort'})\r\n    const animations = MergeSortAlgo(this.state.arr)\r\n    const arr_bars = document.getElementsByClassName('bar')\r\n\r\n    for (var i =0; i < animations.length; i++){\r\n        const [order, barIndex1, barIndex2] = animations[i]\r\n        if (order !== '3rd'){\r\n            const color1 = (order === '1st') ? SUCCESS_COLOR : \r\n                           (order === '2nd') ? INITIAL_COLOR : 'black'\r\n                           \r\n            \r\n            const color2 = (order === '1st') ? SUCCESS_COLOR : \r\n                           (order === '2nd') ? INITIAL_COLOR : 'black' \r\n            \r\n            setTimeout(()=>{\r\n                arr_bars[barIndex1].style.backgroundColor = color1\r\n                arr_bars[barIndex2].style.backgroundColor = color2\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n        else{ // set new height\r\n            const [order, barIndex1, h1] = animations[i]\r\n            setTimeout(()=>{\r\n                arr_bars[barIndex1].style.height = `${h1}px`\r\n                arr_bars[barIndex1].innerHTML = h1\r\n            }, i *this.state.ANIMATION_SPEED)\r\n        }\r\n        // after sorting\r\n        if (i === animations.length-1){\r\n            // make all columns green\r\n            setTimeout(() => {\r\n                for (var i=0; i < arr_bars.length; i++){\r\n                    arr_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                }\r\n                this.setState({disabled: false})\r\n            }, i*this.state.ANIMATION_SPEED)\r\n        }\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport './sortingVisualizer.css'\r\nimport { SelectionSort } from './SelectionSort.js'\r\nimport { BubbleSort } from './BubbleSort.js'\r\nimport { InsertionSort } from './InsertionSort.js'\r\nimport { QuickSort } from './QuickSort.js'\r\nimport { MergeSort } from './MergeSort.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nclass SortingVisualizer extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = ({\r\n            arr: [],\r\n            disabled: false,\r\n            title: 'Sorting Visualizer',\r\n            ANIMATION_SPEED: 10,\r\n        })\r\n        this.resetArr = this.resetArr.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArr()\r\n    }\r\n\r\n    resetArr(){\r\n        this.setState({title: 'Sorting Visualizer'})\r\n        const res = []\r\n        for (var i =0; i <20; i++){\r\n            res.push(getRandNum())\r\n        }\r\n        this.setState({arr: res})\r\n        // reset all color\r\n        const array_bars = document.getElementsByClassName('bar')\r\n        for (var i=0; i < array_bars.length; i++){\r\n            array_bars[i].style.backgroundColor = INITIAL_COLOR\r\n        }\r\n        this.setState({disabled: false})\r\n    }\r\n\r\n    handleClick(e){\r\n        const val = e.target.innerHTML\r\n        if (!this.state.disabled){\r\n            // set disabled and run\r\n            this.setState({disabled: true})\r\n            if (val === 'Reset'){ return this.resetArr() }\r\n            else if (val === 'Bubble Sort'){ return this.BubbleSort()}\r\n            else if (val === 'Selection Sort'){ return this.SelectionSort()}\r\n            else if (val === 'Insertion Sort'){ return this.InsertionSort()}\r\n            else if (val === 'Quick Sort'){ return this.QuickSort()}\r\n            else if (val === 'Merge Sort'){ return this.MergeSort()}\r\n        }\r\n    }\r\n\r\n    handleChange(e){\r\n        let val = e.target.value\r\n        var n = Math.floor(Number(val));\r\n        const is_int = n !== Infinity && String(n) === val && n >= 0;\r\n        const speed =  parseInt(val)\r\n        console.log(speed)\r\n        console.log('here1')\r\n        if (is_int){\r\n            console.log('here2')\r\n            if (speed >= 10 && speed <= 300){\r\n                console.log('here3')\r\n                this.setState({ANIMATION_SPEED: speed})\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    BubbleSort = BubbleSort.bind(this)\r\n\r\n    SelectionSort = SelectionSort.bind(this)\r\n\r\n    InsertionSort = InsertionSort.bind(this)\r\n\r\n    QuickSort = QuickSort.bind(this)\r\n\r\n    MergeSort = MergeSort.bind(this)\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className='button_section'>\r\n                    <label onClick={this.handleClick} >Reset</label>\r\n                    <label onClick={this.handleClick} >Bubble Sort</label>\r\n                    <label onClick={this.handleClick} >Selection Sort</label>\r\n                    <label onClick={this.handleClick} >Insertion Sort</label>\r\n                    <label onClick={this.handleClick} >Quick Sort</label>\r\n                    <label onClick={this.handleClick} >Merge Sort</label>\r\n                    <form className='speed_container'>\r\n                        Speed: <input type='text' onChange={this.handleChange} \r\n                        disabled={this.state.disabled} \r\n                        placeholder=\"10\"\r\n                        className='speed_input'/> 300 (slow) ---{'>'} 10 (fast)\r\n                    </form>\r\n                </div>\r\n                <div className='container'>\r\n                    <div className='title'><h1>{this.state.title}</h1></div>\r\n                    <div className='graph_section'>\r\n                        {this.state.arr.map((i, index) =>(\r\n                            <div className='bar' key={index} \r\n                            style={{height: `${i}px`, backgroundColor: INITIAL_COLOR}}>\r\n                                <div className='text' key={index}>{i}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// returns a random number from 50-300\r\nfunction getRandNum(){\r\n    const min = 50\r\n    const max = 300\r\n    return Math.floor(min + Math.random() * (max - min)) \r\n}\r\n\r\nexport default SortingVisualizer","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SortingVisualizer from './visualization/sortingVisualizer.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}