{"version":3,"sources":["logo.svg","sorting/BubbleSort.js","sorting/sortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BubbleSortAlgo","arr","pairs","length","res_arr","slice","i","j","temp","temp2","end","reset","push","sorted","sort","a","b","console","log","getRandNum","Math","floor","random","SortingVisualizer","state","resetArr","bind","BubbleSort","this","res","setState","array_bars","document","getElementsByClassName","animation","barIndex1","barIndex2","setTimeout","index1","index2","style","backgroundColor","newHeight1","newHeight2","height1","height2","height","innerHTML","color2","className","onClick","InsertionSort","SelectionSort","QuickSort","MergeSort","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,gLC0C5BC,MAzCf,SAAwBC,GAKpB,IAHA,IAAIC,EAAO,GACLC,EAASF,EAAIE,OACfC,EAAUH,EAAII,QACTC,EAAE,EAAGA,EAAGH,EAAO,EAAGG,IACvB,IAAI,IAAIC,EAAE,EAAGA,EAAIJ,EAAOG,EAAE,EAAGC,IAAI,CAC7B,IAAIC,EAAOJ,EAAQG,GACfE,EAAQL,EAAQG,EAAE,GAClBG,EAAOH,IAAMJ,EAAOG,EAAE,EACtBK,EAAe,IAANJ,EAGb,GADAL,EAAMU,KAAK,CAACL,EAAGA,EAAE,EAAGI,IAChBP,EAAQG,GAAKH,EAAQG,EAAE,GAAG,CAAC,IAAD,EACG,CAACH,EAAQG,EAAE,GAAIH,EAAQG,IAAnDH,EAAQG,GADiB,KACbH,EAAQG,EAAE,GADG,KAG1BL,EAAMU,KAAK,CAACL,EAAGA,EAAE,IAEjBL,EAAMU,KAAK,CAACL,EAAGE,EAAOF,EAAE,EAAGC,IAE3BN,EAAMU,KAAK,CAACL,EAAGA,EAAE,EAAGG,SAIpBR,EAAMU,KAAK,EAAE,IAEbV,EAAMU,KAAK,EAAE,IAETF,EACAR,EAAMU,KAAK,CAACL,EAAGA,EAAE,EAAGG,IAElBR,EAAMU,KAAK,EAAE,IAI/B,IAAMC,EAASZ,EAAII,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG9C,OAFAC,QAAQC,IAAId,GACZa,QAAQC,IAAIL,GACLX,GCmGX,SAASiB,IAGL,OAAOC,KAAKC,MAFA,GAEY,IAAAD,KAAKE,UAGlBC,M,kDArIX,aAAc,IAAD,8BACT,gBACKC,MAAS,CACVvB,IAAK,IAET,EAAKwB,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBANT,E,gEAUTE,KAAKH,a,iCAKL,IADA,IAAMI,EAAM,GACHvB,EAAG,EAAGA,EAAG,GAAIA,IAClBuB,EAAIjB,KAAKO,KAEbS,KAAKE,SAAS,CAAC7B,IAAK4B,M,mCAMpB,IAFA,IAAME,EAAaC,SAASC,uBAAuB,OAC7CC,EAAYlC,EAAe4B,KAAKJ,MAAMvB,KACnCK,EAAE,EAAGA,EAAG4B,EAAU/B,OAAQG,IAC/B,IAAyB,IAArB4B,EAAU5B,GAAG,GAAjB,CAGK,GAAIA,EAAE,IAAI,GAAG,WAAD,kBACyB4B,EAAU5B,GADnC,GACN6B,EADM,KACKC,EADL,KACgBzB,EADhB,KAEb0B,YAAW,SAASC,EAAQC,GACxBR,EAAWO,GAAQE,MAAMC,gBApCvB,UAqCFV,EAAWQ,GAAQC,MAAMC,gBArCvB,UAsCE9B,IACAoB,EAAWO,EAAO,GAAGE,MAAMC,gBAxC7B,UADC,GA2CJnC,EAAmB6B,EAAWC,GARnB,QAUb,GAAI9B,EAAE,IAAM,EAAE,CAAC,IAAD,cACgB4B,EAAU5B,GAD1B,GACR6B,EADQ,KACGC,EADH,KAEfC,YAAW,SAASC,EAAQC,GACxBR,EAAWO,GAAQE,MAAMC,gBA7C1B,UA8CCV,EAAWQ,GAAQC,MAAMC,gBA9C1B,YAHI,GAkDJnC,EAAmB6B,EAAWC,QAEhC,GAAI9B,EAAE,IAAM,EAAE,CAAC,IAAD,cACwC4B,EAAU5B,GADlD,GACR6B,EADQ,KACGO,EADH,KACeN,EADf,KAC0BO,EAD1B,KAEfN,YAAW,SAASC,EAAQM,EAASL,EAAQM,GACzCd,EAAWO,GAAQE,MAAMM,OAAzB,UAAqCF,EAArC,MACAb,EAAWO,GAAQS,UAAYH,EAE/Bb,EAAWQ,GAAQC,MAAMM,OAAzB,UAAqCD,EAArC,MACAd,EAAWQ,GAAQQ,UAAYF,IA3D5B,GA6DJvC,EAAmB6B,EAAWO,EAAYN,EAAWO,QAEpDrC,EAAE,IAAK,GAAG,WAAD,kBACuB4B,EAAU5B,GADjC,GACN6B,EADM,KACKC,EADL,KACgB1B,EADhB,KAGPsC,EAAStC,EA9DZ,UAHG,OAkEN2B,YAAW,SAASC,EAAQC,GACxBR,EAAWO,GAAQE,MAAMC,gBAnEvB,OAoEFV,EAAWQ,GAAQC,MAAMC,gBAAkBO,IArExC,GAsEJ1C,EAAmB6B,EAAWC,GAPnB,GAWd9B,IAAM4B,EAAU/B,OAAO,IAEvBkC,YAAW,WACPN,EAAW,GAAGS,MAAMC,gBAzErB,YAJI,GA8EJnC,GAEH+B,YAAW,WACP,IAAK,IAAI/B,EAAE,EAAGA,EAAIyB,EAAW5B,OAAQG,IACjCyB,EAAWzB,GAAGkC,MAAMC,gBAhFtB,YAFC,GAoFJnC,O,2LAuBX,OACI,6BACI,yBAAK2C,UAAU,kBACX,2BAAOC,QAAStB,KAAKH,UAArB,SACA,2BAAOyB,QAAStB,KAAKD,YAArB,eACA,2BAAOuB,QAAStB,KAAKuB,eAArB,kBACA,2BAAOD,QAAStB,KAAKwB,eAArB,kBACA,2BAAOF,QAAStB,KAAKyB,WAArB,cACA,2BAAOH,QAAStB,KAAK0B,WAArB,eAEJ,yBAAKL,UAAU,aACX,yBAAKA,UAAU,SAAQ,mDACvB,yBAAKA,UAAU,iBACVrB,KAAKJ,MAAMvB,IAAIsD,KAAI,SAACjD,EAAGkD,GAAJ,OAChB,yBAAKP,UAAU,MAAMQ,IAAKD,EAC1BhB,MAAO,CAACM,OAAO,GAAD,OAAKxC,EAAL,MAAYmC,gBAzHhC,SA0HU,yBAAKQ,UAAU,OAAOQ,IAAKD,GAAQlD,c,GArHnCoD,aCEjBC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.039b6259.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nfunction BubbleSortAlgo(arr){\r\n    // push 4 times\r\n    var pairs= []\r\n    const length = arr.length\r\n    var res_arr = arr.slice()\r\n    for (var i=0; i< length-1; i++){\r\n        for(var j=0; j < length-i-1; j++){\r\n            let temp = res_arr[j]\r\n            let temp2 = res_arr[j+1]\r\n            var end = (j === length-i-2 ? true: false)\r\n            var reset = (j === 0) ? false : true\r\n            // 1st: Change iterating blocks to green\r\n            pairs.push([j, j+1, reset])\r\n            if (res_arr[j] > res_arr[j+1]){\r\n                [res_arr[j], res_arr[j+1]] = [res_arr[j+1], res_arr[j]]\r\n                // 2nd: change color to red for swapping\r\n                pairs.push([j, j+1])\r\n                // 3rd: swap bars\r\n                pairs.push([j, temp2, j+1, temp])\r\n                // 4th: change bar colors back to initial color\r\n                pairs.push([j, j+1, end])\r\n            }\r\n            else{\r\n                // 2nd: no change \r\n                pairs.push([-1])\r\n                // 3rd: no change\r\n                pairs.push([-1])\r\n                // 4th: change color if end\r\n                if (end) {\r\n                    pairs.push([j, j+1, end])\r\n                }\r\n                else{ pairs.push([-1])}\r\n            }\r\n        }\r\n    }\r\n    const sorted = arr.slice().sort((a, b) => a - b)\r\n    console.log(res_arr)\r\n    console.log(sorted)\r\n    return pairs\r\n}\r\n\r\nexport default BubbleSortAlgo","import React, {Component} from 'react'\r\nimport './sortingVisualizer.css'\r\nimport BubbleSortAlgo from './BubbleSort.js'\r\n\r\nconst ANIMATION_SPEED= 10\r\nconst INITIAL_COLOR = 'pink'\r\nconst SUCCESS_COLOR = '#7FFFD4' // also iteration color\r\nconst SWAP_COLOR = '#F08080'\r\nconst DONE_COLOR = '#E6E6FA'\r\n\r\nclass SortingVisualizer extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = ({\r\n            arr: [],\r\n        })\r\n        this.resetArr = this.resetArr.bind(this)\r\n        this.BubbleSort = this.BubbleSort.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArr()\r\n    }\r\n\r\n    resetArr(){\r\n        const res = []\r\n        for (var i =0; i <20; i++){\r\n            res.push(getRandNum())\r\n        }\r\n        this.setState({arr: res})\r\n    }\r\n\r\n    BubbleSort(){\r\n        const array_bars = document.getElementsByClassName('bar')\r\n        const animation = BubbleSortAlgo(this.state.arr)\r\n        for (var i=0; i <animation.length; i++){\r\n            if (animation[i][0] === -1){\r\n                continue;\r\n            }\r\n            else if (i%4===0){\r\n                const [barIndex1, barIndex2, reset] = animation[i]\r\n                setTimeout(function(index1, index2){\r\n                    array_bars[index1].style.backgroundColor = SUCCESS_COLOR\r\n                    array_bars[index2].style.backgroundColor = SUCCESS_COLOR\r\n                    if (reset){\r\n                        array_bars[index1-1].style.backgroundColor = INITIAL_COLOR\r\n                    }\r\n                }, i*ANIMATION_SPEED, barIndex1, barIndex2)\r\n            }\r\n            else if (i%4 === 1){\r\n                const [barIndex1, barIndex2] = animation[i]\r\n                setTimeout(function(index1, index2){\r\n                    array_bars[index1].style.backgroundColor =SWAP_COLOR\r\n                    array_bars[index2].style.backgroundColor = SWAP_COLOR\r\n                }, i*ANIMATION_SPEED, barIndex1, barIndex2)\r\n            }\r\n            else if (i%4 === 2){\r\n                const [barIndex1, newHeight1, barIndex2, newHeight2] = animation[i]\r\n                setTimeout(function(index1, height1, index2, height2){\r\n                    array_bars[index1].style.height = `${height1}px`\r\n                    array_bars[index1].innerHTML = height1\r\n\r\n                    array_bars[index2].style.height = `${height2}px`\r\n                    array_bars[index2].innerHTML = height2\r\n                    \r\n                }, i*ANIMATION_SPEED, barIndex1, newHeight1, barIndex2, newHeight2)\r\n            }\r\n            else if(i%4 ===3){\r\n                const [barIndex1, barIndex2, end] = animation[i]\r\n                const color1 = INITIAL_COLOR\r\n                const color2 = end ? DONE_COLOR : INITIAL_COLOR\r\n                setTimeout(function(index1, index2){\r\n                    array_bars[index1].style.backgroundColor = color1\r\n                    array_bars[index2].style.backgroundColor = color2\r\n                }, i*ANIMATION_SPEED, barIndex1, barIndex2)\r\n            }\r\n\r\n            // after sorting\r\n            if (i === animation.length-1){\r\n                // make first column purple\r\n                setTimeout(()=>{\r\n                    array_bars[0].style.backgroundColor = DONE_COLOR\r\n                }, i*ANIMATION_SPEED)\r\n                // make all columns green\r\n                setTimeout(() => {\r\n                    for (var i=0; i < array_bars.length; i++){\r\n                        array_bars[i].style.backgroundColor = SUCCESS_COLOR\r\n                    }\r\n                }, i*ANIMATION_SPEED)\r\n            }\r\n        }\r\n    }\r\n\r\n    InsertionSort(){\r\n\r\n    }\r\n\r\n    SelectionSort(){\r\n\r\n    }\r\n\r\n    QuickSort(){\r\n\r\n    }\r\n\r\n    MergeSort(){\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className='button_section'>\r\n                    <label onClick={this.resetArr}>Reset</label>\r\n                    <label onClick={this.BubbleSort}>Bubble Sort</label>\r\n                    <label onClick={this.InsertionSort}>Insertion Sort</label>\r\n                    <label onClick={this.SelectionSort}>Selection Sort</label>\r\n                    <label onClick={this.QuickSort}>Quick Sort</label>\r\n                    <label onClick={this.MergeSort}>Merge Sort</label>\r\n                </div>\r\n                <div className='container'>\r\n                    <div className='title'><h1>Sorting Visualizer</h1></div>\r\n                    <div className='graph_section'>\r\n                        {this.state.arr.map((i, index) =>(\r\n                            <div className='bar' key={index} \r\n                            style={{height: `${i}px`, backgroundColor: INITIAL_COLOR}}>\r\n                                <div className='text' key={index}>{i}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// returns a random number from 50-300\r\nfunction getRandNum(){\r\n    const min = 50\r\n    const max = 300\r\n    return Math.floor(min + Math.random() * (max - min)) \r\n}\r\n\r\nexport default SortingVisualizer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sorting/sortingVisualizer.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}